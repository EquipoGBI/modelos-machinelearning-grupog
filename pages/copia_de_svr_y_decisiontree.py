# -*- coding: utf-8 -*-
"""Copia de SVR y DecisionTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ymLCLLprWCDVFjJ_EgZBDz8doJcCPacq

### PARTE 1 - SVR
"""

from sklearn.svm import SVR 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

df = pd.read_csv('BVN.csv')
df = df.set_index(pd.DatetimeIndex(df['Date'].values))
df

future_days = 5

df[str(future_days)+'_Day_Stock_Forecast']=df[['Close']].shift(-future_days)
df[['Close',str(future_days)+'_Day_Stock_Forecast']]

X=np.array(df[['Close']])
X=X[:df.shape[0] - future_days]
print(X)

y=np.array(df[str(future_days)+'_Day_Stock_Forecast'])
y=y[:-future_days]
print(y)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X,y, test_size = 0.2)

from sklearn.svm import SVR
svr_rbf = SVR(kernel='rbf', C=1e3, gamma = 0.00001)
svr_rbf.fit(x_train, y_train)

svr_rbf_confidence = svr_rbf.score(x_test, y_test)
print('svr_rbf accuracy: ',svr_rbf_confidence)

svm_prediction = svr_rbf.predict(x_test)
print(svm_prediction)

print(y_test)

plt.figure(figsize=(12,4))
plt.plot(svm_prediction, label='Prediction', lw=2, alpha=.7)
plt.plot(y_test, label='Actual', lw=2, alpha=.7)
plt.title('Prediction vs Actual')
plt.ylabel('Stock')
plt.xlabel('Days')
plt.legend()
plt.xticks(rotation=45)
plt.show()

"""### PARTE 2"""

import os
import datetime
import numpy as np
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
import matplotlib.pyplot as plt

start = datetime.datetime(2010,1,1)
end = datetime.datetime.now()

df = pd.read_csv('GLD.csv')
df

plt.plot(df['Close'])

df['Return'] = df['Adj Close'].pct_change(60).shift(-60)
list_of_features = ['High','Low','Close','Volume','Adj Close']
X= df[list_of_features]
y=np.where(df.Return > 0,1,0)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=423)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

treeClassifier = DecisionTreeClassifier(max_depth=3, min_samples_leaf=6)
treeClassifier.fit(X_train, y_train)

y_pred = treeClassifier.predict(X_test)

from sklearn.metrics import classification_report
report = classification_report(y_test,y_pred)
print(report)

pip install graphviz

pip install python-graphviz

from sklearn import tree
import graphviz
data = tree.export_graphviz(treeClassifier,filled=True,feature_names=list_of_features, class_names=np.array(['0','1']))
graphviz.Source(data)

